{"version":3,"sources":["skipped-periodic-values.js"],"names":[],"mappings":"AAAA,AAAC,CAAA,UAAU,QAAQ,SAAS;AAC1B,SAAO,YAAY,YAAY,OAAO,WAAW,cAAc,OAAO,UAAU,QAAQ,QAAQ,6BAChG,OAAO,WAAW,cAAc,OAAO,MAAM,OAAO,CAAC,2BAA2B,WAChF,OAAO,wBAAwB,QAAQ,OAAO;GAC9C,MAAM,UAAU,sBAAsB;AAAE;;AAExC,WAAS,sBAAsB,OAAO,UAAU,OAAO,QAAQ;AAC7D,QAAI,UAAU,qBAAqB,OAAO,OAAO;;;;AAIjD,QAAI,YAAY,SAAS,aAAa,GAAG;AACvC,aAAO;;;;;AAKT,QAAI,UAAU,QAAQ,GAAG;AACvB,gBAAU,UAAU;;;;AAItB,QAAI,UAAU,QAAQ,UAAU;AAC9B,aAAO;WAGJ;;;AAGH,aAAO,IAAI,SAAS,CAAC,WAAS,YAAY,SAAO;;;;AAIrD,MAAI,0BAA0B;;AAE9B,SAAO","file":"skipped-periodic-values.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('nearest-periodic-value')) :\n  typeof define === 'function' && define.amd ? define(['nearest-periodic-value'], factory) :\n  global.skippedPeriodicValues = factory(global.nearestPeriodicValue)\n}(this, function (nearestPeriodicValue) { 'use strict';\n\n  function skippedPeriodicValues(start, distance, value, period) {\n    var nearest = nearestPeriodicValue(start, value, period);\n\n    // Make the algorithm inclusive. If the distance is 0 and we're\n    // on the nearest value, then we don't count it.\n    if (nearest === start && distance === 0) {\n      return 0;\n    }\n\n    // If our nearest value is behind the start, or is the start,\n    // then push it to the next value\n    if (nearest - start < 0) {\n      nearest = nearest + period;\n    }\n\n    // No values were skipped if the nearest is shorter than the distance\n    if (nearest - start > distance) {\n      return 0;\n    }\n\n    else {\n      // Determine how many 'skipped intervals' there were. Skipped intervals can be\n      // thought of a period-1 function, as they do not contribute to the total value.\n      return 1 + parseInt((distance-nearest) / (period-1));\n    }\n  }\n\n  var skipped_periodic_values = skippedPeriodicValues;\n\n  return skipped_periodic_values;\n\n}));\n"],"sourceRoot":"/source/"}